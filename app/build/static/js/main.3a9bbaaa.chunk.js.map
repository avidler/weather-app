{"version":3,"sources":["components/top/weather.jsx","components/top/top.jsx","components/bottom/forecastday.jsx","components/bottom/bottom.jsx","App.js","serviceWorker.js","store.js","index.js"],"names":["Weather","props","location","temp_c","text","iconURL","className","src","alt","TopSection","useState","isShowPopperOn","setIsShowPopperOn","referenceElement","setReferenceElement","popperElement","setPopperElement","arrowElement","setArrowElement","locationName","setLocationName","usePopper","modifiers","name","options","element","styles","attributes","eventEmitter","togglePopperElement","type","ref","onClick","popper","htmlFor","id","placeholder","onChange","e","target","value","emit","console","log","style","arrow","ForecastDay","shown","setShown","iconurl","iconcode","onMouseEnter","dayId","onMouseLeave","description","Math","round","temp_max","humidity","pressure","wind","forecastDate","weather","BottomSection","forecastList","forecastDays","map","day","idx","timeCheck","dt_txt","slice","length","icon","dt","main","speed","key","App","cityName","setCityName","setTemp_c","setText","setIconURL","setForecastDays","isLoading","setIsLoading","useEffect","a","axios","require","params","appid","q","units","get","then","response","data","list","temp","catch","error","getWeather","on","Boolean","window","hostname","match","Store","EventEmitter","React","Children","children","child","cloneElement","appName","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3a9bbaaa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nfunction Weather(props) {\r\n    const { location, temp_c, text, iconURL} = props\r\n\r\n    return(\r\n        <div className=\"weather-container\">\r\n            <div className=\"weather-container-header\">{location}</div>\r\n            <div className=\"weather-container-inner\">\r\n                <div className=\"weather-container-image\"><img src={iconURL} alt=\"sun\" /></div>\r\n                <div className=\"weather-container-temperature\">{temp_c}°</div>\r\n            </div>\r\n            <div className=\"weather-container-footer\">{text}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Weather","import React, {useState} from 'react'\r\nimport Weather from './weather'\r\n\r\nimport { usePopper } from 'react-popper';\r\n\r\nimport './topStyle.scss'\r\n\r\nfunction TopSection(props) {\r\n    const [isShowPopperOn, setIsShowPopperOn] = useState(false)\r\n    const [referenceElement, setReferenceElement] = useState(\"ref\");\r\n    const [popperElement, setPopperElement] = useState(\"here is the popper element\");\r\n    const [arrowElement, setArrowElement] = useState(null);\r\n    const [locationName, setLocationName] = useState(\"\")\r\n    const { styles, attributes } = usePopper(referenceElement, popperElement, {\r\n      modifiers: [{ name: 'arrow', options: { element: arrowElement } }],\r\n    });\r\n\r\n    const { eventEmitter } = props\r\n    \r\n\r\n    function togglePopperElement() {\r\n        setIsShowPopperOn(!isShowPopperOn)\r\n    }\r\n\r\n    function onLocationNameChange(e) {\r\n        setLocationName(e.target.value)\r\n    }\r\n\r\n    function selectCity() {\r\n        togglePopperElement()\r\n        var rtrn = eventEmitter.emit(\"updateWeather\", locationName)\r\n        if(rtrn === false) {\r\n            console.log('Error triggering event');\r\n          }\r\n    }\r\n\r\n    //console.log(props)\r\n    return(\r\n        <div className=\"top-container\">\r\n            <div className=\"title\">Weather Up</div>\r\n            <Weather {...props}/>\r\n            <button className=\"btn btn-select-location\" type=\"button\" ref={setReferenceElement} onClick={togglePopperElement}>\r\n        Select Location\r\n      </button>\r\n        { isShowPopperOn && \r\n      <div className=\"popup-container\" ref={setPopperElement} {...attributes.popper}>\r\n        <div className=\"form-container\">\r\n            <label htmlFor=\"location-name\">Location Name</label>\r\n            <input id=\"location-name\" type=\"text\" placeholder=\"City Name\" onChange={onLocationNameChange}/>\r\n            <button className=\"btn btn-select-location\" onClick={selectCity}>Select</button>\r\n        </div>\r\n        <div ref={setArrowElement} style={styles.arrow} />\r\n      </div>\r\n           }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopSection","import React, { useState } from \"react\"\r\n\r\nfunction ForecastDay(props) {\r\n\r\n    const [shown, setShown] = useState(false)\r\n\r\n    function showToolTip(dayId) {\r\n        setShown(true)\r\n    }\r\n\r\n    function hideToolTip(dayId) {\r\n        setShown(false)\r\n    }\r\n\r\n    const iconurl = \"http://openweathermap.org/img/w/\" + props.iconcode + \".png\"\r\n     return(\r\n        <div className=\"forecastday-container\" onMouseEnter={() => showToolTip(props.dayId)} onMouseLeave={() => hideToolTip(props.dayId)}>\r\n                {shown ? <span className=\"tooltiptext\" id={props.dayId}>\r\n                            {props.description}\r\n                            <br /><br />Max Temp: {Math.round(props.temp_max)}°\r\n                            <br />Humidity: {props.humidity}\r\n                            <br />Pressure: {props.pressure}\r\n                            <br />Wind Speed: {props.wind}\r\n                        </span> \r\n                        : \r\n                        null\r\n                }\r\n                <div className=\"forecastday-container-date\">{props.forecastDate}</div>\r\n                <div className=\"forecastday-container-image\"><img src={iconurl} alt=\"weather icon\"/></div>\r\n                <div className=\"forecastday-container-text\">{props.weather}</div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ForecastDay","import React from 'react'\r\n\r\nimport \"./bottomStyle.scss\"\r\n\r\nimport Forecastday from \"./forecastday\"\r\n\r\nfunction BottomSection(props) {\r\n\r\n    const forecastList = props.forecastDays\r\n    console.log(\"forecastList: \", forecastList)\r\n    return(\r\n        <div className=\"bottom-container\">\r\n            <div className=\"bottom-container-header\">5-day forecast</div>\r\n            <div className=\"bottom-inner-container tooltip\">\r\n            \r\n            {\r\n            forecastList.map((day, idx) => {\r\n                var timeCheck = day.dt_txt.slice(day.dt_txt.length-8)\r\n                var iconcode = day.weather[0].icon;\r\n                var dayId = day.dt\r\n                var forecastDate = day.dt_txt.slice(8, 10)+\"/\"+day.dt_txt.slice(5, 7);\r\n                var temp_max = day.main.temp_max\r\n                var humidity = day.main.humidity\r\n                var pressure = day.main.pressure\r\n                var description = day.weather[0].description\r\n                var wind = day.wind.speed\r\n                if (timeCheck === \"12:00:00\"){\r\n                    return (\r\n                        <Forecastday \r\n                            iconcode={iconcode} \r\n                            weather={day.weather[0].main} \r\n                            description={description}\r\n                            dayId={dayId}\r\n                            temp_max={temp_max} \r\n                            forecastDate={forecastDate}\r\n                            key={idx}\r\n                            humidity={humidity}\r\n                            pressure={pressure}\r\n                            wind={wind}\r\n                        />\r\n                    )\r\n                   \r\n                    \r\n    }\r\n    else{return<></>}\r\n})\r\n\r\n            }\r\n           \r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BottomSection","import React, {useEffect, useState} from 'react';\n\nimport './App.css';\nimport \"./sass/app.scss\";\n\nimport TopSection from './components/top/top'\nimport BottomSection from './components/bottom/bottom'\n\nfunction App(props) {\n  const [cityName, setCityName] = useState(\"London\")\n\n\n  const { eventEmitter } = props\n\n  const [temp_c, setTemp_c] = useState(0)\n  const [text, setText] = useState(\"\")\n  const [iconURL, setIconURL] = useState(\"\")\n  const [forecastDays, setForecastDays] = useState([])\n\n  const [isLoading, setIsLoading] = useState(true)\n  \n  useEffect(() => {\n\n    async function getWeather () {\n      const axios = require('axios')\n      const params = {\n        appid: 'f84cddc6b247326126f3ca0fcf0bc7cf',\n        q: cityName,\n        units: 'metric'\n      }\n      await axios.get('https://api.openweathermap.org/data/2.5/forecast', {params})\n      .then(response => {\n        const apiResponse = response.data;\n        return apiResponse\n      }).then((data) => {\n        console.log(\"data forecast: \",data)\n        setIsLoading(false)\n        setTemp_c(Math.round(data.list[0].main.temp))\n        //setIsDay(data.current.is_day)\n        setText(data.list[0].weather[0].main)\n        var iconcode = data.list[0].weather[0].icon;\n        console.log(\"iconcode: \",iconcode)\n        setIconURL(\"http://openweathermap.org/img/w/\" + iconcode + \".png\")\n        //console.log(\"IconURL: \",iconURL)\n        setForecastDays(data.list)\n        //console.log(\"forecastDays: \", forecastDays);\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    getWeather()\n  }, [cityName])\n\n  eventEmitter.on(\"updateWeather\", data => {\n    setCityName(data)\n    console.log(\"Updating weather... LocationName:\", data)\n  })\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"main-container\">\n        {isLoading && <h3>Loading Weather...</h3>}\n        {!isLoading &&\n        <>\n        <div className=\"top-section\"><TopSection \n                                      location={cityName} \n                                      temp_c={temp_c} \n                                      text={text} \n                                      iconURL={iconURL}\n                                      eventEmitter={props.eventEmitter}\n                                    />\n        </div>\n        <div className=\"bottom-section\"><BottomSection\n                                        forecastDays={forecastDays}\n                                      /></div>\n        </>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\n\r\nimport { EventEmitter } from \"events\"\r\n\r\nfunction Store(props) {\r\n    const appName = \"Weather Up\"\r\n\r\n    const eventEmitter = new EventEmitter();\r\n\r\n    return(\r\n        React.Children.map(props.children, child => {\r\n            return (React.cloneElement(child, {appName, eventEmitter}))\r\n        })\r\n    )\r\n}\r\n\r\nexport default Store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport Store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Store><App /></Store>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}